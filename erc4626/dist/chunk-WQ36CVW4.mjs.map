{"version":3,"sources":["../src/erc4626.service.ts"],"sourcesContent":["import { Tool } from \"@goat-sdk/core\";\nimport { EVMWalletClient } from \"@goat-sdk/wallet-evm\";\nimport { ERC4626_ABI } from \"./abi\";\nimport {\n    GetPoolTotalSupplyParameters,\n    DepositVaultParameters,\n    WithdrawVaultParameters,\n    GetMaxSupplyParameters,\n    /*\n    ApproveParameters,\n    ConvertFromBaseUnitParameters,\n    ConvertToBaseUnitParameters,\n    GetTokenAllowanceParameters,\n    GetTokenBalanceParameters,\n    GetTokenInfoBySymbolParameters,\n    GetTokenTotalSupplyParameters,\n    RevokeApprovalParameters,\n    TransferFromParameters,\n    TransferParameters,*/\n} from \"./parameters\";\nimport { Token } from \"./token\";\n\nexport class Erc4626Service {\n\n    \n    @Tool({\n        //name: \"kim_burn\",\n        description: \"Deposit an amount into the ERC4626 vault.\",\n    })\n    async deposit(walletClient: EVMWalletClient, parameters: DepositVaultParameters): Promise<string> {\n        try {\n            const hash = await walletClient.sendTransaction({\n                to: parameters.address, //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"deposit\",\n                args: [parameters.assets, parameters.receiver],\n            });\n\n            return hash.hash;\n        } catch (error) {\n            throw new Error(`Failed to deposit into vault: ${error}`);\n        }\n    }\n\n    @Tool({\n        //name: \"kim_burn\",\n        description: \"Withdraw an amount into the ERC4626 vault.\",\n    })\n    async withdraw(walletClient: EVMWalletClient, parameters: WithdrawVaultParameters): Promise<string> {\n        try {\n            const hash = await walletClient.sendTransaction({\n                to: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"withdraw\",\n                args: [parameters.assets, parameters.receiver, parameters.owner],\n            });\n\n            return hash.hash;\n        } catch (error) {\n            throw new Error(`Failed to withdraw from vault: ${error}`);\n        }\n    }\n\n\n    @Tool({\n        description: \"Get the max withdrawal amount of an ERC4626 vault\",\n    })\n    async getMaxWithdraw(walletClient: EVMWalletClient, parameters: GetMaxSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.address, //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"maxWithdraw\",\n                args: [parameters.address],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch max withdrawal: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the owner of an ERC4626 vault.\",\n    })\n    async getOwner(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"owner\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the symbol of an ERC4626 vault.\",\n    })\n    async getSymbol(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n            console.log(\"parameters\",parameters)\n            console.log(\"parameters.address\",parameters.address)\n\n            const rawBalance = await walletClient.read({\n                address: parameters.address, //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"symbol\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the name of an ERC4626 vault.\",\n    })\n    async getName(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"name\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the underlying Token of an ERC4626 vault.\",\n    })\n    async getUnderlyingToken(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"underlyingToken\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the TotalAssets of an ERC4626 vault.\",\n    })\n    async getTotalAssets(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"totalAssets\",\n                args: [],\n            });\n\n            return Number(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the TotalSupply of an ERC4626 vault.\",\n    })\n    async getTotalSupply(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"totalSupply\",\n                args: [],\n            });\n\n            return Number(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n\n}\n    /*\n    private tokens: Token[];\n\n    constructor({ tokens }: { tokens?: Token[] } = {}) {\n        this.tokens = tokens ?? [];\n    }\n\n    @Tool({\n        description: \"Get the ERC20 token info by its symbol, including the contract address, decimals, and name\",\n    })\n    async getTokenInfoBySymbol(walletClient: EVMWalletClient, parameters: GetTokenInfoBySymbolParameters) {\n        const token = this.tokens.find((token) =>\n            [token.symbol, token.symbol.toLowerCase()].includes(parameters.symbol),\n        );\n\n        if (!token) {\n            throw Error(`Token with symbol ${parameters.symbol} not found`);\n        }\n\n        const chain = walletClient.getChain();\n\n        const contractAddress = token.chains[chain.id]?.contractAddress;\n\n        if (!contractAddress) {\n            throw Error(`Token with symbol ${parameters.symbol} not found on chain ${chain.id}`);\n        }\n\n        return {\n            symbol: token?.symbol,\n            contractAddress,\n            decimals: token?.decimals,\n            name: token?.name,\n        };\n    }\n\n    @Tool({\n        description: \"Get the balance of an ERC20 token in base units. Convert to decimal units before returning.\",\n    })\n    async getTokenBalance(walletClient: EVMWalletClient, parameters: GetTokenBalanceParameters) {\n        try {\n            const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"balanceOf\",\n                args: [resolvedWalletAddress],\n            });\n\n            return Number(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Transfer an amount of an ERC20 token to an address\",\n    })\n    async transfer(walletClient: EVMWalletClient, parameters: TransferParameters) {\n        try {\n            const to = await walletClient.resolveAddress(parameters.to);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"transfer\",\n                args: [to, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the total supply of an ERC20 token\",\n    })\n    async getTokenTotalSupply(walletClient: EVMWalletClient, parameters: GetTokenTotalSupplyParameters) {\n        try {\n            const rawTotalSupply = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"totalSupply\",\n            });\n\n            return rawTotalSupply.value;\n        } catch (error) {\n            throw Error(`Failed to fetch total supply: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the allowance of an ERC20 token\",\n    })\n    async getTokenAllowance(walletClient: EVMWalletClient, parameters: GetTokenAllowanceParameters) {\n        try {\n            const owner = await walletClient.resolveAddress(parameters.owner);\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const rawAllowance = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"allowance\",\n                args: [owner, spender],\n            });\n            return Number(rawAllowance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch allowance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Approve an amount of an ERC20 token to an address\",\n    })\n    async approve(walletClient: EVMWalletClient, parameters: ApproveParameters) {\n        try {\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"approve\",\n                args: [spender, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to approve: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Revoke approval for an ERC20 token to an address\",\n    })\n    async revokeApproval(walletClient: EVMWalletClient, parameters: RevokeApprovalParameters) {\n        try {\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"approve\",\n                args: [spender, 0],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to revoke approval: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Transfer an amount of an ERC20 token from an address to another address\",\n    })\n    async transferFrom(walletClient: EVMWalletClient, parameters: TransferFromParameters) {\n        try {\n            const from = await walletClient.resolveAddress(parameters.from);\n            const to = await walletClient.resolveAddress(parameters.to);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"transferFrom\",\n                args: [from, to, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to transfer from: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Convert an amount of an ERC20 token to its base unit\",\n    })\n    async convertToBaseUnit(parameters: ConvertToBaseUnitParameters) {\n        const { amount, decimals } = parameters;\n        const baseUnit = amount * 10 ** decimals;\n        return Number(baseUnit);\n    }\n\n    @Tool({\n        description: \"Convert an amount of an ERC20 token from its base unit to its decimal unit\",\n    })\n    async convertFromBaseUnit(parameters: ConvertFromBaseUnitParameters) {\n        const { amount, decimals } = parameters;\n        const decimalUnit = amount / 10 ** decimals;\n        return Number(decimalUnit);\n    }\n}\n*/"],"mappings":"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","names":["Tool","EVMWalletClient","Erc4626Service","deposit","walletClient","parameters","hash","sendTransaction","to","address","abi","ERC4626_ABI","functionName","args","assets","receiver","error","Error","withdraw","owner","getMaxWithdraw","rawBalance","read","String","value","getOwner","getSymbol","console","log","getName","getUnderlyingToken","getTotalAssets","Number","getTotalSupply","description"]}