{"version":3,"sources":["/home/armsve/agents/goat/typescript/packages/plugins/erc4626/dist/chunk-OFPIOCJC.js","../src/erc4626.service.ts"],"names":["Erc4626Service","deposit","walletClient","parameters","hash","sendTransaction","to","address","abi","ERC4626_ABI","functionName","args","assets","receiver","error","Error","owner"],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACF,sDAA4B;AAC5B;AACE;AACF,sDAA4B;AAC5B;AACA;ACbA,sCAAqB;AACrB,iDAAgC;ADehC,SAAS,YAAY,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE;AACrD,EAAE,IAAI,EAAE,EAAE,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC;AAC9H,EAAE,GAAG,CAAC,OAAO,QAAQ,IAAI,SAAS,GAAG,OAAO,OAAO,CAAC,SAAS,IAAI,UAAU,EAAE,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC;AAChI,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC;AACnJ,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC;AAC/D;AACA,qCAAM,YAAa,EAAE,cAAc,CAAC;AACpC,SAAS,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE;AAC5B,EAAE,GAAG,CAAC,OAAO,QAAQ,IAAI,SAAS,GAAG,OAAO,OAAO,CAAC,SAAS,IAAI,UAAU,EAAE,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1G;AACA,qCAAM,YAAa,EAAE,cAAc,CAAC;ACJ7B,IAAMA,eAAAA,EAAN,MAAMA;ADMb,EAAE,OCNWA;ADOb,IAAI,qCAAM,IAAK,EAAE,gBAAgB,CAAC;AAClC,EAAE;AACF,ECNI,MAIMC,OAAAA,CAAQC,YAAAA,EAA+BC,UAAAA,EAAqD;AAC9F,IAAA,IAAI;AACA,MAAA,MAAMC,KAAAA,EAAO,MAAMF,YAAAA,CAAaG,eAAAA,CAAgB;ADG5D,QCFgBC,EAAAA,EAAIH,UAAAA,CAAWI,OAAAA;ADG/B,QCFgBC,GAAAA,EAAKC,4BAAAA;ADGrB,QCFgBC,YAAAA,EAAc,SAAA;ADG9B,QCFgBC,IAAAA,EAAM;ADGtB,UCHuBR,UAAAA,CAAWS,MAAAA;ADIlC,UCJ0CT,UAAAA,CAAWU;ADKrD,QAAQ;AACR,MCLY,CAAA,CAAA;AAEA,MAAA,OAAOT,IAAAA,CAAKA,IAAAA;ADKxB,ICJQ,EAAA,MAAA,CAASU,KAAAA,EAAO;AACZ,MAAA,MAAM,IAAIC,KAAAA,CAAM,CAAA,8BAAA,EAAiCD,KAAAA,CAAAA,CAAAA;AACrD,IAAA;AACJ,EAAA;AAMoG,EAAA;AAC5F,IAAA;AACgD,MAAA;AACxC,QAAA;AACCL,QAAAA;AACS,QAAA;AACR,QAAA;AAAYG,UAAAA;AAAmBC,UAAAA;AAAqBG,UAAAA;ADGb,QAAA;ACFjD,MAAA;AAEYZ,MAAAA;AACA,IAAA;AACsCU,MAAAA;AACtD,IAAA;AACJ,EAAA;AAMwF,EAAA;AAChF,IAAA;AAG2C,MAAA;AAC9B,QAAA;AACJL,QAAAA;AACS,QAAA;AACR,QAAA;AAAYF,UAAAA;ADH2B,QAAA;ACIjD,MAAA;AAE8B,MAAA;AAClB,IAAA;AAC0C,MAAA;AAC1D,IAAA;AACJ,EAAA;AAKwF,EAAA;AAChF,IAAA;AAG2C,MAAA;AAC9B,QAAA;AACJE,QAAAA;AACS,QAAA;AACR,QAAA;AACV,MAAA;AAE8B,MAAA;AAClB,IAAA;AACmC,MAAA;AACnD,IAAA;AACJ,EAAA;AAKyF,EAAA;AACjF,IAAA;AAEyBN,MAAAA;AAC0B,MAAA;AAER,MAAA;AACnBI,QAAAA;AACfE,QAAAA;AACS,QAAA;AACR,QAAA;AACV,MAAA;AAE8B,MAAA;AAClB,IAAA;AACmC,MAAA;AACnD,IAAA;AACJ,EAAA;AAKuF,EAAA;AAC/E,IAAA;AAG2C,MAAA;AAC9B,QAAA;AACJA,QAAAA;AACS,QAAA;AACR,QAAA;AACV,MAAA;AAE8B,MAAA;AAClB,IAAA;AACmC,MAAA;AACnD,IAAA;AACJ,EAAA;AAKkG,EAAA;AAC1F,IAAA;AAG2C,MAAA;AAC9B,QAAA;AACJA,QAAAA;AACS,QAAA;AACR,QAAA;AACV,MAAA;AAE8B,MAAA;AAClB,IAAA;AACmC,MAAA;AACnD,IAAA;AACJ,EAAA;AAK8F,EAAA;AACtF,IAAA;AAG2C,MAAA;AAC9B,QAAA;AACJA,QAAAA;AACS,QAAA;AACR,QAAA;AACV,MAAA;AAE8B,MAAA;AAClB,IAAA;AACmC,MAAA;AACnD,IAAA;AACJ,EAAA;AAK8F,EAAA;AACtF,IAAA;AAG2C,MAAA;AAC9B,QAAA;AACJA,QAAAA;AACS,QAAA;AACR,QAAA;AACV,MAAA;AAE8B,MAAA;AAClB,IAAA;AACmC,MAAA;AACnD,IAAA;AACJ,EAAA;AAGJ;AD/C6D;AACA,EAAA;AACA;ACvIxC,IAAA;ADyIwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;AACA;AChIxC,IAAA;ADkIwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;ACxHxC,IAAA;AD0HwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;AC/GxC,IAAA;ADiHwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;ACtGxC,IAAA;ADwGwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;AC3FxC,IAAA;AD6FwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;AClFxC,IAAA;ADoFwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;ACzExC,IAAA;AD2EwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA,EAAA;AChExC,IAAA;ADkEwC,EAAA;AACA,EAAA;AACA,EAAA;AACA,IAAA;AACA,IAAA;AACA,EAAA;AACA,EAAA;AACA;AACA;AACA;AACA;AACA","file":"/home/armsve/agents/goat/typescript/packages/plugins/erc4626/dist/chunk-OFPIOCJC.js","sourcesContent":[null,"import { Tool } from \"@goat-sdk/core\";\nimport { EVMWalletClient } from \"@goat-sdk/wallet-evm\";\nimport { ERC4626_ABI } from \"./abi\";\nimport {\n    GetPoolTotalSupplyParameters,\n    DepositVaultParameters,\n    WithdrawVaultParameters,\n    GetMaxSupplyParameters,\n    /*\n    ApproveParameters,\n    ConvertFromBaseUnitParameters,\n    ConvertToBaseUnitParameters,\n    GetTokenAllowanceParameters,\n    GetTokenBalanceParameters,\n    GetTokenInfoBySymbolParameters,\n    GetTokenTotalSupplyParameters,\n    RevokeApprovalParameters,\n    TransferFromParameters,\n    TransferParameters,*/\n} from \"./parameters\";\nimport { Token } from \"./token\";\n\nexport class Erc4626Service {\n\n    \n    @Tool({\n        //name: \"kim_burn\",\n        description: \"Deposit an amount into the ERC4626 vault.\",\n    })\n    async deposit(walletClient: EVMWalletClient, parameters: DepositVaultParameters): Promise<string> {\n        try {\n            const hash = await walletClient.sendTransaction({\n                to: parameters.address, //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"deposit\",\n                args: [parameters.assets, parameters.receiver],\n            });\n\n            return hash.hash;\n        } catch (error) {\n            throw new Error(`Failed to deposit into vault: ${error}`);\n        }\n    }\n\n    @Tool({\n        //name: \"kim_burn\",\n        description: \"Withdraw an amount into the ERC4626 vault.\",\n    })\n    async withdraw(walletClient: EVMWalletClient, parameters: WithdrawVaultParameters): Promise<string> {\n        try {\n            const hash = await walletClient.sendTransaction({\n                to: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"withdraw\",\n                args: [parameters.assets, parameters.receiver, parameters.owner],\n            });\n\n            return hash.hash;\n        } catch (error) {\n            throw new Error(`Failed to withdraw from vault: ${error}`);\n        }\n    }\n\n\n    @Tool({\n        description: \"Get the max withdrawal amount of an ERC4626 vault\",\n    })\n    async getMaxWithdraw(walletClient: EVMWalletClient, parameters: GetMaxSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.address, //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"maxWithdraw\",\n                args: [parameters.address],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch max withdrawal: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the owner of an ERC4626 vault.\",\n    })\n    async getOwner(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"owner\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the symbol of an ERC4626 vault.\",\n    })\n    async getSymbol(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n            console.log(\"parameters\",parameters)\n            console.log(\"parameters.address\",parameters.address)\n\n            const rawBalance = await walletClient.read({\n                address: parameters.address, //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"symbol\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the name of an ERC4626 vault.\",\n    })\n    async getName(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"name\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the underlying Token of an ERC4626 vault.\",\n    })\n    async getUnderlyingToken(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"underlyingToken\",\n                args: [],\n            });\n\n            return String(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the TotalAssets of an ERC4626 vault.\",\n    })\n    async getTotalAssets(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"totalAssets\",\n                args: [],\n            });\n\n            return Number(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the TotalSupply of an ERC4626 vault.\",\n    })\n    async getTotalSupply(walletClient: EVMWalletClient, parameters: GetPoolTotalSupplyParameters) {\n        try {\n            //const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: \"0x28c52E6c053AD4F2727E2F8de2AD5B81139ca9D4\", //parameters.poolAddress,\n                abi: ERC4626_ABI,\n                functionName: \"totalSupply\",\n                args: [],\n            });\n\n            return Number(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n\n}\n    /*\n    private tokens: Token[];\n\n    constructor({ tokens }: { tokens?: Token[] } = {}) {\n        this.tokens = tokens ?? [];\n    }\n\n    @Tool({\n        description: \"Get the ERC20 token info by its symbol, including the contract address, decimals, and name\",\n    })\n    async getTokenInfoBySymbol(walletClient: EVMWalletClient, parameters: GetTokenInfoBySymbolParameters) {\n        const token = this.tokens.find((token) =>\n            [token.symbol, token.symbol.toLowerCase()].includes(parameters.symbol),\n        );\n\n        if (!token) {\n            throw Error(`Token with symbol ${parameters.symbol} not found`);\n        }\n\n        const chain = walletClient.getChain();\n\n        const contractAddress = token.chains[chain.id]?.contractAddress;\n\n        if (!contractAddress) {\n            throw Error(`Token with symbol ${parameters.symbol} not found on chain ${chain.id}`);\n        }\n\n        return {\n            symbol: token?.symbol,\n            contractAddress,\n            decimals: token?.decimals,\n            name: token?.name,\n        };\n    }\n\n    @Tool({\n        description: \"Get the balance of an ERC20 token in base units. Convert to decimal units before returning.\",\n    })\n    async getTokenBalance(walletClient: EVMWalletClient, parameters: GetTokenBalanceParameters) {\n        try {\n            const resolvedWalletAddress = await walletClient.resolveAddress(parameters.wallet);\n\n            const rawBalance = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"balanceOf\",\n                args: [resolvedWalletAddress],\n            });\n\n            return Number(rawBalance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch balance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Transfer an amount of an ERC20 token to an address\",\n    })\n    async transfer(walletClient: EVMWalletClient, parameters: TransferParameters) {\n        try {\n            const to = await walletClient.resolveAddress(parameters.to);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"transfer\",\n                args: [to, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to transfer: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the total supply of an ERC20 token\",\n    })\n    async getTokenTotalSupply(walletClient: EVMWalletClient, parameters: GetTokenTotalSupplyParameters) {\n        try {\n            const rawTotalSupply = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"totalSupply\",\n            });\n\n            return rawTotalSupply.value;\n        } catch (error) {\n            throw Error(`Failed to fetch total supply: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Get the allowance of an ERC20 token\",\n    })\n    async getTokenAllowance(walletClient: EVMWalletClient, parameters: GetTokenAllowanceParameters) {\n        try {\n            const owner = await walletClient.resolveAddress(parameters.owner);\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const rawAllowance = await walletClient.read({\n                address: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"allowance\",\n                args: [owner, spender],\n            });\n            return Number(rawAllowance.value);\n        } catch (error) {\n            throw Error(`Failed to fetch allowance: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Approve an amount of an ERC20 token to an address\",\n    })\n    async approve(walletClient: EVMWalletClient, parameters: ApproveParameters) {\n        try {\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"approve\",\n                args: [spender, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to approve: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Revoke approval for an ERC20 token to an address\",\n    })\n    async revokeApproval(walletClient: EVMWalletClient, parameters: RevokeApprovalParameters) {\n        try {\n            const spender = await walletClient.resolveAddress(parameters.spender);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"approve\",\n                args: [spender, 0],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to revoke approval: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Transfer an amount of an ERC20 token from an address to another address\",\n    })\n    async transferFrom(walletClient: EVMWalletClient, parameters: TransferFromParameters) {\n        try {\n            const from = await walletClient.resolveAddress(parameters.from);\n            const to = await walletClient.resolveAddress(parameters.to);\n\n            const hash = await walletClient.sendTransaction({\n                to: parameters.tokenAddress,\n                abi: ERC20_ABI,\n                functionName: \"transferFrom\",\n                args: [from, to, parameters.amount],\n            });\n            return hash.hash;\n        } catch (error) {\n            throw Error(`Failed to transfer from: ${error}`);\n        }\n    }\n\n    @Tool({\n        description: \"Convert an amount of an ERC20 token to its base unit\",\n    })\n    async convertToBaseUnit(parameters: ConvertToBaseUnitParameters) {\n        const { amount, decimals } = parameters;\n        const baseUnit = amount * 10 ** decimals;\n        return Number(baseUnit);\n    }\n\n    @Tool({\n        description: \"Convert an amount of an ERC20 token from its base unit to its decimal unit\",\n    })\n    async convertFromBaseUnit(parameters: ConvertFromBaseUnitParameters) {\n        const { amount, decimals } = parameters;\n        const decimalUnit = amount / 10 ** decimals;\n        return Number(decimalUnit);\n    }\n}\n*/"]}